{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useKeycloak } from \"@react-keycloak/web\";\nimport axios from \"axios\";\nconst KEYCLOAK_TOKEN_URL = `${process.env.REACT_APP_KEYCLOAK_URL}/realms/${process.env.REACT_APP_KEYCLOAK_REALM}/protocol/openid-connect/token`;\nconst BACKEND_API_URL = \"http://localhost:5000/api/auth\"; // Adjust for production\n\nexport const useAuth = () => {\n  _s();\n  const {\n    keycloak\n  } = useKeycloak();\n\n  // ðŸ”¹ **Login with Keycloak Directly**\n  const login = async (email, password, rememberMe) => {\n    try {\n      const response = await axios.post(KEYCLOAK_TOKEN_URL, new URLSearchParams({\n        grant_type: \"password\",\n        client_id: process.env.REACT_APP_KEYCLOAK_CLIENT_ID,\n        client_secret: process.env.REACT_APP_KEYCLOAK_CLIENT_SECRET,\n        username: email,\n        password\n      }), {\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        }\n      });\n      const {\n        access_token,\n        refresh_token\n      } = response.data;\n\n      // Store tokens securely\n      if (rememberMe) {\n        localStorage.setItem(\"token\", access_token);\n        localStorage.setItem(\"refreshToken\", refresh_token);\n      } else {\n        sessionStorage.setItem(\"token\", access_token);\n        sessionStorage.setItem(\"refreshToken\", refresh_token);\n      }\n      return response.data;\n    } catch (error) {\n      var _error$response;\n      console.error(\"Login failed:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      throw error;\n    }\n  };\n\n  // ðŸ”¹ **Signup (Calls Your Backend, Not Keycloak Directly)**\n  const signup = async (email, password) => {\n    try {\n      await axios.post(`${BACKEND_API_URL}/signup`, {\n        email,\n        password\n      });\n      return \"Signup successful!\";\n    } catch (error) {\n      console.error(\"Signup failed:\", error);\n      throw error;\n    }\n  };\n\n  // ðŸ”¹ **Forgot Password (Calls Your Backend)**\n  const forgotPassword = async email => {\n    try {\n      await axios.post(`${BACKEND_API_URL}/forgot-password`, {\n        email\n      });\n      return \"Password reset email sent!\";\n    } catch (error) {\n      console.error(\"Forgot password failed:\", error);\n      throw error;\n    }\n  };\n\n  // ðŸ”¹ **Logout from Keycloak**\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    sessionStorage.removeItem(\"token\");\n    keycloak.logout({\n      redirectUri: window.location.origin\n    });\n  };\n  return {\n    login,\n    signup,\n    forgotPassword,\n    logout,\n    keycloak\n  };\n};\n_s(useAuth, \"RhI8ij3JxyCvHhezn5pOW/NVOzw=\", false, function () {\n  return [useKeycloak];\n});","map":{"version":3,"names":["useKeycloak","axios","KEYCLOAK_TOKEN_URL","process","env","REACT_APP_KEYCLOAK_URL","REACT_APP_KEYCLOAK_REALM","BACKEND_API_URL","useAuth","_s","keycloak","login","email","password","rememberMe","response","post","URLSearchParams","grant_type","client_id","REACT_APP_KEYCLOAK_CLIENT_ID","client_secret","REACT_APP_KEYCLOAK_CLIENT_SECRET","username","headers","access_token","refresh_token","data","localStorage","setItem","sessionStorage","error","_error$response","console","message","signup","forgotPassword","logout","removeItem","redirectUri","window","location","origin"],"sources":["C:/Users/madko/Downloads/Keycloack_login/payco-auth/src/auth.js"],"sourcesContent":["import { useKeycloak } from \"@react-keycloak/web\";\r\nimport axios from \"axios\";\r\n\r\nconst KEYCLOAK_TOKEN_URL = `${process.env.REACT_APP_KEYCLOAK_URL}/realms/${process.env.REACT_APP_KEYCLOAK_REALM}/protocol/openid-connect/token`;\r\nconst BACKEND_API_URL = \"http://localhost:5000/api/auth\"; // Adjust for production\r\n\r\nexport const useAuth = () => {\r\n  const { keycloak } = useKeycloak();\r\n\r\n  // ðŸ”¹ **Login with Keycloak Directly**\r\n  const login = async (email, password, rememberMe) => {\r\n    try {\r\n      const response = await axios.post(\r\n        KEYCLOAK_TOKEN_URL,\r\n        new URLSearchParams({\r\n          grant_type: \"password\",\r\n          client_id: process.env.REACT_APP_KEYCLOAK_CLIENT_ID,\r\n          client_secret: process.env.REACT_APP_KEYCLOAK_CLIENT_SECRET,\r\n          username: email,\r\n          password,\r\n        }),\r\n        { headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" } }\r\n      );\r\n\r\n      const { access_token, refresh_token } = response.data;\r\n\r\n      // Store tokens securely\r\n      if (rememberMe) {\r\n        localStorage.setItem(\"token\", access_token);\r\n        localStorage.setItem(\"refreshToken\", refresh_token);\r\n      } else {\r\n        sessionStorage.setItem(\"token\", access_token);\r\n        sessionStorage.setItem(\"refreshToken\", refresh_token);\r\n      }\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Login failed:\", error.response?.data || error.message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // ðŸ”¹ **Signup (Calls Your Backend, Not Keycloak Directly)**\r\n  const signup = async (email, password) => {\r\n    try {\r\n      await axios.post(`${BACKEND_API_URL}/signup`, { email, password });\r\n      return \"Signup successful!\";\r\n    } catch (error) {\r\n      console.error(\"Signup failed:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // ðŸ”¹ **Forgot Password (Calls Your Backend)**\r\n  const forgotPassword = async (email) => {\r\n    try {\r\n      await axios.post(`${BACKEND_API_URL}/forgot-password`, { email });\r\n      return \"Password reset email sent!\";\r\n    } catch (error) {\r\n      console.error(\"Forgot password failed:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // ðŸ”¹ **Logout from Keycloak**\r\n  const logout = () => {\r\n    localStorage.removeItem(\"token\");\r\n    sessionStorage.removeItem(\"token\");\r\n    keycloak.logout({ redirectUri: window.location.origin });\r\n  };\r\n\r\n  return { login, signup, forgotPassword, logout, keycloak };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}