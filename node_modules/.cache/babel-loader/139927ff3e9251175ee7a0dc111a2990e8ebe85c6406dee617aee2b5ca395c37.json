{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport isEqual from 'react-fast-compare';\n/**\n * Create an AuthProvider component to wrap a React app with, it will take care of common AuthClient\n * lifecycle handling (such as initialization and token refresh).\n *\n * @param AuthContext the Auth context to be used by the created AuthProvider\n *\n * @returns the AuthProvider component\n */\nexport function createAuthProvider(AuthContext) {\n  var defaultInitOptions = {\n    onLoad: 'check-sso'\n  };\n  var initialState = {\n    initialized: false,\n    isAuthenticated: false,\n    isLoading: true\n  };\n  return /** @class */function (_super) {\n    __extends(KeycloakProvider, _super);\n    function KeycloakProvider() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n      _this.state = __assign({}, initialState);\n      _this.onError = function (event) {\n        return function (error) {\n          var onEvent = _this.props.onEvent;\n          // Notify Events listener\n          onEvent && onEvent(event, error);\n        };\n      };\n      _this.updateState = function (event) {\n        return function () {\n          var _a = _this.props,\n            authClient = _a.authClient,\n            onEvent = _a.onEvent,\n            onTokens = _a.onTokens,\n            isLoadingCheck = _a.isLoadingCheck;\n          var _b = _this.state,\n            prevInitialized = _b.initialized,\n            prevAuthenticated = _b.isAuthenticated,\n            prevLoading = _b.isLoading;\n          // Notify Events listener\n          onEvent && onEvent(event);\n          // Check Loading state\n          var isLoading = isLoadingCheck ? isLoadingCheck(authClient) : false;\n          // Check if user is authenticated\n          var isAuthenticated = isUserAuthenticated(authClient);\n          // Avoid double-refresh if state hasn't changed\n          if (!prevInitialized || isAuthenticated !== prevAuthenticated || isLoading !== prevLoading) {\n            _this.setState({\n              initialized: true,\n              isAuthenticated: isAuthenticated,\n              isLoading: isLoading\n            });\n          }\n          // Notify token listener, if any\n          var idToken = authClient.idToken,\n            refreshToken = authClient.refreshToken,\n            token = authClient.token;\n          onTokens && onTokens({\n            idToken: idToken,\n            refreshToken: refreshToken,\n            token: token\n          });\n        };\n      };\n      _this.refreshToken = function (event) {\n        return function () {\n          var _a = _this.props,\n            autoRefreshToken = _a.autoRefreshToken,\n            authClient = _a.authClient,\n            onEvent = _a.onEvent;\n          // Notify Events listener\n          onEvent && onEvent(event);\n          if (autoRefreshToken !== false) {\n            // Refresh Keycloak token\n            authClient.updateToken(5);\n          }\n        };\n      };\n      return _this;\n    }\n    KeycloakProvider.prototype.componentDidMount = function () {\n      this.init();\n    };\n    KeycloakProvider.prototype.componentDidUpdate = function (_a) {\n      var prevAuthClient = _a.authClient,\n        prevInitOptions = _a.initOptions;\n      var _b = this.props,\n        initOptions = _b.initOptions,\n        authClient = _b.authClient;\n      if (authClient !== prevAuthClient || !isEqual(initOptions, prevInitOptions)) {\n        // De-init previous AuthClient instance\n        prevAuthClient.onReady = undefined;\n        prevAuthClient.onAuthSuccess = undefined;\n        prevAuthClient.onAuthError = undefined;\n        prevAuthClient.onAuthRefreshSuccess = undefined;\n        prevAuthClient.onAuthRefreshError = undefined;\n        prevAuthClient.onAuthLogout = undefined;\n        prevAuthClient.onTokenExpired = undefined;\n        // Reset state\n        this.setState(__assign({}, initialState));\n        // Init new AuthClient instance\n        this.init();\n      }\n    };\n    KeycloakProvider.prototype.init = function () {\n      var _a = this.props,\n        initOptions = _a.initOptions,\n        authClient = _a.authClient;\n      // Attach Keycloak listeners\n      authClient.onReady = this.updateState('onReady');\n      authClient.onAuthSuccess = this.updateState('onAuthSuccess');\n      authClient.onAuthError = this.onError('onAuthError');\n      authClient.onAuthRefreshSuccess = this.updateState('onAuthRefreshSuccess');\n      authClient.onAuthRefreshError = this.onError('onAuthRefreshError');\n      authClient.onAuthLogout = this.updateState('onAuthLogout');\n      authClient.onTokenExpired = this.refreshToken('onTokenExpired');\n      authClient.init(__assign(__assign({}, defaultInitOptions), initOptions)).catch(this.onError('onInitError'));\n    };\n    KeycloakProvider.prototype.render = function () {\n      var _a = this.props,\n        children = _a.children,\n        authClient = _a.authClient,\n        LoadingComponent = _a.LoadingComponent;\n      var _b = this.state,\n        initialized = _b.initialized,\n        isLoading = _b.isLoading;\n      if (!!LoadingComponent && (!initialized || isLoading)) {\n        return LoadingComponent;\n      }\n      return React.createElement(AuthContext.Provider, {\n        value: {\n          initialized: initialized,\n          authClient: authClient\n        }\n      }, children);\n    };\n    return KeycloakProvider;\n  }(React.PureComponent);\n}\nfunction isUserAuthenticated(authClient) {\n  return !!authClient.idToken && !!authClient.token;\n}\nexport default createAuthProvider;\n//# sourceMappingURL=provider.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}