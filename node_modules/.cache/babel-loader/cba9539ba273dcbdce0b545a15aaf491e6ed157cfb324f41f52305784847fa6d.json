{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useKeycloak } from \"@react-keycloak/web\";\nimport axios from \"axios\";\nconst KEYCLOAK_TOKEN_URL = `${process.env.REACT_APP_KEYCLOAK_URL}/realms/${process.env.REACT_APP_KEYCLOAK_REALM}/protocol/openid-connect/token`;\nconst BACKEND_API_URL = \"http://localhost:5000/api/auth\"; // Adjust for production\n\nexport const useAuth = () => {\n  _s();\n  const {\n    keycloak\n  } = useKeycloak();\n\n  // const login = async (email, password, rememberMe) => {\n  //   try {\n  //       console.log(\"ðŸ”¹ Attempting Login for:\", email);\n  //       console.log(\"ðŸ”¹ Using Keycloak URL:\", `${process.env.REACT_APP_KEYCLOAK_URL}/realms/${process.env.REACT_APP_KEYCLOAK_REALM}/protocol/openid-connect/token`);\n  //       console.log(\"ðŸ”¹ Client ID:\", process.env.REACT_APP_KEYCLOAK_CLIENT_ID);\n\n  //       const response = await axios.post(\n  //           `${process.env.REACT_APP_KEYCLOAK_URL}/realms/${process.env.REACT_APP_KEYCLOAK_REALM}/protocol/openid-connect/token`,\n  //           new URLSearchParams({\n  //               grant_type: \"password\",\n  //               client_id: process.env.REACT_APP_KEYCLOAK_CLIENT_ID,\n  //               client_secret: process.env.REACT_APP_KEYCLOAK_CLIENT_SECRET,\n  //               username: email,\n  //               password,\n  //           }),\n  //           { headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" } }\n  //       );\n\n  //       console.log(\"ðŸ”¹ Keycloak Response:\", response.data);\n\n  //       const { access_token, refresh_token } = response.data;\n\n  //       if (rememberMe) {\n  //           localStorage.setItem(\"token\", access_token);\n  //           localStorage.setItem(\"refreshToken\", refresh_token);\n  //       } else {\n  //           sessionStorage.setItem(\"token\", access_token);\n  //           sessionStorage.setItem(\"refreshToken\", refresh_token);\n  //       }\n\n  //       return response.data;\n  //   } catch (error) {\n  //       console.error(\"ðŸ”´ Login failed:\", error.response?.data || error.message);\n  //       console.error(\"ðŸ”¹ Full Error Response:\", error.response);\n  //       throw error;\n  //   }\n  // };\n\n  //short api\n  const login = async (email, password, rememberMe) => {\n    try {\n      console.log(\"ðŸ”¹ Attempting Login for:\", email);\n\n      // ðŸ”¹ Send login request to your backend\n      const response = await axios.post(\"http://localhost:5000/api/auth/login\", {\n        email,\n        password\n      });\n      console.log(\"âœ… Backend Login Response:\", response.data); // Log the response\n\n      if (!response.data.token) {\n        console.error(\"ðŸ”´ No Token in Response:\", response.data);\n        throw new Error(\"Login failed, no token received.\");\n      }\n      const {\n        token,\n        user\n      } = response.data;\n\n      // âœ… Store tokens securely\n      if (rememberMe) {\n        localStorage.setItem(\"token\", token);\n      } else {\n        sessionStorage.setItem(\"token\", token);\n      }\n\n      // âœ… Redirect to dashboard after login\n      window.location.href = \"/dashboard\";\n      return {\n        token,\n        user\n      };\n    } catch (error) {\n      var _error$response;\n      console.error(\"ðŸ”´ Login failed:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      throw error;\n    }\n  };\n\n  // ðŸ”¹ **Signup (Calls Your Backend, Not Keycloak Directly)**\n  const signup = async (email, password) => {\n    try {\n      const response = await axios.post(\"http://localhost:5000/api/auth/signup\", {\n        email,\n        password\n      });\n      console.log(\"âœ… Signup successful:\", response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response2;\n      console.error(\"ðŸ”´ Signup failed:\", ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n      throw error;\n    }\n  };\n\n  // ðŸ”¹ **Forgot Password (Calls Your Backend)**\n  const forgotPassword = async email => {\n    try {\n      await axios.post(`${BACKEND_API_URL}/forgot-password`, {\n        email\n      });\n      return \"Password reset email sent!\";\n    } catch (error) {\n      console.error(\"Forgot password failed:\", error);\n      throw error;\n    }\n  };\n\n  // ðŸ”¹ **Logout from Keycloak**\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    sessionStorage.removeItem(\"token\");\n    keycloak.logout({\n      redirectUri: window.location.origin\n    });\n  };\n  return {\n    login,\n    signup,\n    forgotPassword,\n    logout,\n    keycloak\n  };\n};\n_s(useAuth, \"RhI8ij3JxyCvHhezn5pOW/NVOzw=\", false, function () {\n  return [useKeycloak];\n});","map":{"version":3,"names":["useKeycloak","axios","KEYCLOAK_TOKEN_URL","process","env","REACT_APP_KEYCLOAK_URL","REACT_APP_KEYCLOAK_REALM","BACKEND_API_URL","useAuth","_s","keycloak","login","email","password","rememberMe","console","log","response","post","data","token","error","Error","user","localStorage","setItem","sessionStorage","window","location","href","_error$response","message","signup","_error$response2","forgotPassword","logout","removeItem","redirectUri","origin"],"sources":["C:/Users/madko/Downloads/Keycloack_login/payco-auth/src/auth.js"],"sourcesContent":["import { useKeycloak } from \"@react-keycloak/web\";\r\nimport axios from \"axios\";\r\n\r\nconst KEYCLOAK_TOKEN_URL = `${process.env.REACT_APP_KEYCLOAK_URL}/realms/${process.env.REACT_APP_KEYCLOAK_REALM}/protocol/openid-connect/token`;\r\nconst BACKEND_API_URL = \"http://localhost:5000/api/auth\"; // Adjust for production\r\n\r\nexport const useAuth = () => {\r\n  const { keycloak } = useKeycloak();\r\n\r\n\r\n\r\n// const login = async (email, password, rememberMe) => {\r\n//   try {\r\n//       console.log(\"ðŸ”¹ Attempting Login for:\", email);\r\n//       console.log(\"ðŸ”¹ Using Keycloak URL:\", `${process.env.REACT_APP_KEYCLOAK_URL}/realms/${process.env.REACT_APP_KEYCLOAK_REALM}/protocol/openid-connect/token`);\r\n//       console.log(\"ðŸ”¹ Client ID:\", process.env.REACT_APP_KEYCLOAK_CLIENT_ID);\r\n\r\n//       const response = await axios.post(\r\n//           `${process.env.REACT_APP_KEYCLOAK_URL}/realms/${process.env.REACT_APP_KEYCLOAK_REALM}/protocol/openid-connect/token`,\r\n//           new URLSearchParams({\r\n//               grant_type: \"password\",\r\n//               client_id: process.env.REACT_APP_KEYCLOAK_CLIENT_ID,\r\n//               client_secret: process.env.REACT_APP_KEYCLOAK_CLIENT_SECRET,\r\n//               username: email,\r\n//               password,\r\n//           }),\r\n//           { headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" } }\r\n//       );\r\n\r\n//       console.log(\"ðŸ”¹ Keycloak Response:\", response.data);\r\n\r\n//       const { access_token, refresh_token } = response.data;\r\n\r\n//       if (rememberMe) {\r\n//           localStorage.setItem(\"token\", access_token);\r\n//           localStorage.setItem(\"refreshToken\", refresh_token);\r\n//       } else {\r\n//           sessionStorage.setItem(\"token\", access_token);\r\n//           sessionStorage.setItem(\"refreshToken\", refresh_token);\r\n//       }\r\n\r\n//       return response.data;\r\n//   } catch (error) {\r\n//       console.error(\"ðŸ”´ Login failed:\", error.response?.data || error.message);\r\n//       console.error(\"ðŸ”¹ Full Error Response:\", error.response);\r\n//       throw error;\r\n//   }\r\n// };\r\n\r\n\r\n\r\n//short api\r\nconst login = async (email, password, rememberMe) => {\r\n  try {\r\n      console.log(\"ðŸ”¹ Attempting Login for:\", email);\r\n\r\n      // ðŸ”¹ Send login request to your backend\r\n      const response = await axios.post(\"http://localhost:5000/api/auth/login\", {\r\n          email,\r\n          password,\r\n      });\r\n\r\n      console.log(\"âœ… Backend Login Response:\", response.data); // Log the response\r\n\r\n      if (!response.data.token) {\r\n          console.error(\"ðŸ”´ No Token in Response:\", response.data);\r\n          throw new Error(\"Login failed, no token received.\");\r\n      }\r\n\r\n      const { token, user } = response.data;\r\n\r\n      // âœ… Store tokens securely\r\n      if (rememberMe) {\r\n          localStorage.setItem(\"token\", token);\r\n      } else {\r\n          sessionStorage.setItem(\"token\", token);\r\n      }\r\n\r\n      // âœ… Redirect to dashboard after login\r\n      window.location.href = \"/dashboard\"; \r\n\r\n      return { token, user };\r\n  } catch (error) {\r\n      console.error(\"ðŸ”´ Login failed:\", error.response?.data || error.message);\r\n      throw error;\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n  // ðŸ”¹ **Signup (Calls Your Backend, Not Keycloak Directly)**\r\n  const signup = async (email, password) => {\r\n    try {\r\n        const response = await axios.post(\"http://localhost:5000/api/auth/signup\", {\r\n            email,\r\n            password,\r\n        });\r\n\r\n        console.log(\"âœ… Signup successful:\", response.data);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error(\"ðŸ”´ Signup failed:\", error.response?.data || error.message);\r\n        throw error;\r\n    }\r\n};\r\n\r\n\r\n  // ðŸ”¹ **Forgot Password (Calls Your Backend)**\r\n  const forgotPassword = async (email) => {\r\n    try {\r\n      await axios.post(`${BACKEND_API_URL}/forgot-password`, { email });\r\n      return \"Password reset email sent!\";\r\n    } catch (error) {\r\n      console.error(\"Forgot password failed:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // ðŸ”¹ **Logout from Keycloak**\r\n  const logout = () => {\r\n    localStorage.removeItem(\"token\");\r\n    sessionStorage.removeItem(\"token\");\r\n    keycloak.logout({ redirectUri: window.location.origin });\r\n  };\r\n\r\n  return { login, signup, forgotPassword, logout, keycloak };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}