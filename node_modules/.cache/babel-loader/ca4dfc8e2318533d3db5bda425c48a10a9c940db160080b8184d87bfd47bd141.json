{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useKeycloak } from \"@react-keycloak/web\";\nimport axios from \"axios\";\nconst KEYCLOAK_TOKEN_URL = `${process.env.REACT_APP_KEYCLOAK_URL}/realms/${process.env.REACT_APP_KEYCLOAK_REALM}/protocol/openid-connect/token`;\nconst BACKEND_API_URL = \"http://localhost:5000/api/auth\"; // Adjust for production\n\nexport const useAuth = () => {\n  _s();\n  const {\n    keycloak\n  } = useKeycloak();\n\n  // const login = async (email, password, rememberMe) => {\n  //   try {\n  //       console.log(\"ðŸ”¹ Attempting Login for:\", email);\n  //       console.log(\"ðŸ”¹ Using Keycloak URL:\", `${process.env.REACT_APP_KEYCLOAK_URL}/realms/${process.env.REACT_APP_KEYCLOAK_REALM}/protocol/openid-connect/token`);\n  //       console.log(\"ðŸ”¹ Client ID:\", process.env.REACT_APP_KEYCLOAK_CLIENT_ID);\n\n  //       const response = await axios.post(\n  //           `${process.env.REACT_APP_KEYCLOAK_URL}/realms/${process.env.REACT_APP_KEYCLOAK_REALM}/protocol/openid-connect/token`,\n  //           new URLSearchParams({\n  //               grant_type: \"password\",\n  //               client_id: process.env.REACT_APP_KEYCLOAK_CLIENT_ID,\n  //               client_secret: process.env.REACT_APP_KEYCLOAK_CLIENT_SECRET,\n  //               username: email,\n  //               password,\n  //           }),\n  //           { headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" } }\n  //       );\n\n  //       console.log(\"ðŸ”¹ Keycloak Response:\", response.data);\n\n  //       const { access_token, refresh_token } = response.data;\n\n  //       if (rememberMe) {\n  //           localStorage.setItem(\"token\", access_token);\n  //           localStorage.setItem(\"refreshToken\", refresh_token);\n  //       } else {\n  //           sessionStorage.setItem(\"token\", access_token);\n  //           sessionStorage.setItem(\"refreshToken\", refresh_token);\n  //       }\n\n  //       return response.data;\n  //   } catch (error) {\n  //       console.error(\"ðŸ”´ Login failed:\", error.response?.data || error.message);\n  //       console.error(\"ðŸ”¹ Full Error Response:\", error.response);\n  //       throw error;\n  //   }\n  // };\n\n  //short api\n  const login = async (email, password, rememberMe) => {\n    try {\n      console.log(\"ðŸ”¹ Attempting Login for:\", email);\n      const response = await axios.post(\"http://localhost:5000/api/auth/login\", {\n        email,\n        password\n      });\n      console.log(\"âœ… Backend Login Response:\", response.data);\n      const {\n        token,\n        refresh_token,\n        user\n      } = response.data;\n\n      // âœ… Ensure the response contains both tokens\n      if (!token || !refresh_token) {\n        console.error(\"ðŸ”´ No Token or Refresh Token in Response:\", response.data);\n        throw new Error(\"Login failed, no token received.\");\n      }\n      if (rememberMe) {\n        localStorage.setItem(\"token\", token);\n        localStorage.setItem(\"refreshToken\", refresh_token);\n      } else {\n        sessionStorage.setItem(\"token\", token);\n        sessionStorage.setItem(\"refreshToken\", refresh_token);\n      }\n      console.log(\"âœ… Tokens stored successfully.\");\n      window.location.href = \"/dashboard\";\n      return {\n        token,\n        refresh_token,\n        user\n      };\n    } catch (error) {\n      var _error$response;\n      console.error(\"ðŸ”´ Login failed:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      throw error;\n    }\n  };\n\n  // ðŸ”¹ **Signup (Calls Your Backend, Not Keycloak Directly)**\n  const signup = async (email, password) => {\n    try {\n      const response = await axios.post(\"http://localhost:5000/api/auth/signup\", {\n        email,\n        password\n      });\n      console.log(\"âœ… Signup successful:\", response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response2;\n      console.error(\"ðŸ”´ Signup failed:\", ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n      throw error;\n    }\n  };\n\n  // ðŸ”¹ **Forgot Password (Calls Your Backend)**\n  const forgotPassword = async email => {\n    try {\n      await axios.post(`${BACKEND_API_URL}/forgot-password`, {\n        email\n      });\n      return \"Password reset email sent!\";\n    } catch (error) {\n      console.error(\"Forgot password failed:\", error);\n      throw error;\n    }\n  };\n\n  // ðŸ”¹ **Logout from Keycloak**\n  const logout = async () => {\n    try {\n      const refreshToken = localStorage.getItem(\"refreshToken\") || sessionStorage.getItem(\"refreshToken\");\n      if (!refreshToken) {\n        console.log(\"ðŸ”¹ No refresh token found. Clearing local session.\");\n        localStorage.removeItem(\"token\");\n        localStorage.removeItem(\"refreshToken\");\n        sessionStorage.removeItem(\"token\");\n        sessionStorage.removeItem(\"refreshToken\");\n        window.location.href = \"/login\";\n        return;\n      }\n      console.log(\"ðŸ”¹ Logging out user via backend...\");\n      await axios.post(\"http://localhost:5000/api/auth/logout\", {\n        refreshToken\n      });\n\n      // âœ… Clear session after logout\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"refreshToken\");\n      sessionStorage.removeItem(\"token\");\n      sessionStorage.removeItem(\"refreshToken\");\n      window.location.href = \"/login\"; // Redirect after logout\n    } catch (error) {\n      console.error(\"ðŸ”´ Logout failed:\", error);\n      window.location.href = \"/login\"; // Ensure user is logged out even if backend fails\n    }\n  };\n  return {\n    login,\n    signup,\n    forgotPassword,\n    logout,\n    keycloak\n  };\n};\n_s(useAuth, \"RhI8ij3JxyCvHhezn5pOW/NVOzw=\", false, function () {\n  return [useKeycloak];\n});","map":{"version":3,"names":["useKeycloak","axios","KEYCLOAK_TOKEN_URL","process","env","REACT_APP_KEYCLOAK_URL","REACT_APP_KEYCLOAK_REALM","BACKEND_API_URL","useAuth","_s","keycloak","login","email","password","rememberMe","console","log","response","post","data","token","refresh_token","user","error","Error","localStorage","setItem","sessionStorage","window","location","href","_error$response","message","signup","_error$response2","forgotPassword","logout","refreshToken","getItem","removeItem"],"sources":["C:/Users/madko/Downloads/Keycloack_login/working_1/payco-auth/src/auth.js"],"sourcesContent":["import { useKeycloak } from \"@react-keycloak/web\";\r\nimport axios from \"axios\";\r\n\r\nconst KEYCLOAK_TOKEN_URL = `${process.env.REACT_APP_KEYCLOAK_URL}/realms/${process.env.REACT_APP_KEYCLOAK_REALM}/protocol/openid-connect/token`;\r\nconst BACKEND_API_URL = \"http://localhost:5000/api/auth\"; // Adjust for production\r\n\r\nexport const useAuth = () => {\r\n  const { keycloak } = useKeycloak();\r\n\r\n\r\n\r\n// const login = async (email, password, rememberMe) => {\r\n//   try {\r\n//       console.log(\"ðŸ”¹ Attempting Login for:\", email);\r\n//       console.log(\"ðŸ”¹ Using Keycloak URL:\", `${process.env.REACT_APP_KEYCLOAK_URL}/realms/${process.env.REACT_APP_KEYCLOAK_REALM}/protocol/openid-connect/token`);\r\n//       console.log(\"ðŸ”¹ Client ID:\", process.env.REACT_APP_KEYCLOAK_CLIENT_ID);\r\n\r\n//       const response = await axios.post(\r\n//           `${process.env.REACT_APP_KEYCLOAK_URL}/realms/${process.env.REACT_APP_KEYCLOAK_REALM}/protocol/openid-connect/token`,\r\n//           new URLSearchParams({\r\n//               grant_type: \"password\",\r\n//               client_id: process.env.REACT_APP_KEYCLOAK_CLIENT_ID,\r\n//               client_secret: process.env.REACT_APP_KEYCLOAK_CLIENT_SECRET,\r\n//               username: email,\r\n//               password,\r\n//           }),\r\n//           { headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" } }\r\n//       );\r\n\r\n//       console.log(\"ðŸ”¹ Keycloak Response:\", response.data);\r\n\r\n//       const { access_token, refresh_token } = response.data;\r\n\r\n//       if (rememberMe) {\r\n//           localStorage.setItem(\"token\", access_token);\r\n//           localStorage.setItem(\"refreshToken\", refresh_token);\r\n//       } else {\r\n//           sessionStorage.setItem(\"token\", access_token);\r\n//           sessionStorage.setItem(\"refreshToken\", refresh_token);\r\n//       }\r\n\r\n//       return response.data;\r\n//   } catch (error) {\r\n//       console.error(\"ðŸ”´ Login failed:\", error.response?.data || error.message);\r\n//       console.error(\"ðŸ”¹ Full Error Response:\", error.response);\r\n//       throw error;\r\n//   }\r\n// };\r\n\r\n\r\n\r\n//short api\r\nconst login = async (email, password, rememberMe) => {\r\n  try {\r\n    console.log(\"ðŸ”¹ Attempting Login for:\", email);\r\n\r\n    const response = await axios.post(\"http://localhost:5000/api/auth/login\", {\r\n      email,\r\n      password,\r\n    });\r\n\r\n    console.log(\"âœ… Backend Login Response:\", response.data);\r\n\r\n    const { token, refresh_token, user } = response.data;\r\n\r\n    // âœ… Ensure the response contains both tokens\r\n    if (!token || !refresh_token) {\r\n      console.error(\"ðŸ”´ No Token or Refresh Token in Response:\", response.data);\r\n      throw new Error(\"Login failed, no token received.\");\r\n    }\r\n\r\n    if (rememberMe) {\r\n      localStorage.setItem(\"token\", token);\r\n      localStorage.setItem(\"refreshToken\", refresh_token);\r\n    } else {\r\n      sessionStorage.setItem(\"token\", token);\r\n      sessionStorage.setItem(\"refreshToken\", refresh_token);\r\n    }\r\n\r\n    console.log(\"âœ… Tokens stored successfully.\");\r\n    window.location.href = \"/dashboard\";\r\n\r\n    return { token, refresh_token, user };\r\n  } catch (error) {\r\n    console.error(\"ðŸ”´ Login failed:\", error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n\r\n  // ðŸ”¹ **Signup (Calls Your Backend, Not Keycloak Directly)**\r\n  const signup = async (email, password) => {\r\n    try {\r\n        const response = await axios.post(\"http://localhost:5000/api/auth/signup\", {\r\n            email,\r\n            password,\r\n        });\r\n\r\n        console.log(\"âœ… Signup successful:\", response.data);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error(\"ðŸ”´ Signup failed:\", error.response?.data || error.message);\r\n        throw error;\r\n    }\r\n};\r\n\r\n\r\n  // ðŸ”¹ **Forgot Password (Calls Your Backend)**\r\n  const forgotPassword = async (email) => {\r\n    try {\r\n      await axios.post(`${BACKEND_API_URL}/forgot-password`, { email });\r\n      return \"Password reset email sent!\";\r\n    } catch (error) {\r\n      console.error(\"Forgot password failed:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // ðŸ”¹ **Logout from Keycloak**\r\n  const logout = async () => {\r\n    try {\r\n      const refreshToken = localStorage.getItem(\"refreshToken\") || sessionStorage.getItem(\"refreshToken\");\r\n  \r\n      if (!refreshToken) {\r\n        console.log(\"ðŸ”¹ No refresh token found. Clearing local session.\");\r\n        localStorage.removeItem(\"token\");\r\n        localStorage.removeItem(\"refreshToken\");\r\n        sessionStorage.removeItem(\"token\");\r\n        sessionStorage.removeItem(\"refreshToken\");\r\n        window.location.href = \"/login\";\r\n        return;\r\n      }\r\n  \r\n      console.log(\"ðŸ”¹ Logging out user via backend...\");\r\n  \r\n      await axios.post(\"http://localhost:5000/api/auth/logout\", { refreshToken });\r\n  \r\n      // âœ… Clear session after logout\r\n      localStorage.removeItem(\"token\");\r\n      localStorage.removeItem(\"refreshToken\");\r\n      sessionStorage.removeItem(\"token\");\r\n      sessionStorage.removeItem(\"refreshToken\");\r\n  \r\n      window.location.href = \"/login\"; // Redirect after logout\r\n    } catch (error) {\r\n      console.error(\"ðŸ”´ Logout failed:\", error);\r\n      window.location.href = \"/login\"; // Ensure user is logged out even if backend fails\r\n    }\r\n  };\r\n  \r\n\r\n  return { login, signup, forgotPassword, logout, keycloak };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}