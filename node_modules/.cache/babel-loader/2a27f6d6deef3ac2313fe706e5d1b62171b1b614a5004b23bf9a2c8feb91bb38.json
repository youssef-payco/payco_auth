{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useKeycloak } from \"@react-keycloak/web\";\nimport axios from \"axios\";\nconst KEYCLOAK_TOKEN_URL = `${process.env.REACT_APP_KEYCLOAK_URL}/realms/${process.env.REACT_APP_KEYCLOAK_REALM}/protocol/openid-connect/token`;\nconst BACKEND_API_URL = \"http://localhost:5000/api/auth\"; // Adjust for production\n\nexport const useAuth = () => {\n  _s();\n  const {\n    keycloak\n  } = useKeycloak();\n\n  //   // ðŸ”¹ **Login with Keycloak Directly**\n  //   const login = async (email, password, rememberMe) => {\n  //     try {\n  //         const response = await axios.post(\n  //             `${process.env.REACT_APP_KEYCLOAK_URL}/realms/${process.env.REACT_APP_KEYCLOAK_REALM}/protocol/openid-connect/token`,\n  //             new URLSearchParams({\n  //                 grant_type: \"password\",\n  //                 client_id: process.env.REACT_APP_KEYCLOAK_CLIENT_ID,\n  //                 client_secret: process.env.REACT_APP_KEYCLOAK_CLIENT_SECRET,\n  //                 username: email,\n  //                 password,\n  //             }),\n  //             { headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" } }\n  //         );\n\n  //         const { access_token, refresh_token } = response.data;\n\n  //         // âœ… Store tokens securely\n  //         if (rememberMe) {\n  //             localStorage.setItem(\"token\", access_token);\n  //             localStorage.setItem(\"refreshToken\", refresh_token);\n  //         } else {\n  //             sessionStorage.setItem(\"token\", access_token);\n  //             sessionStorage.setItem(\"refreshToken\", refresh_token);\n  //         }\n\n  //         return response.data;\n  //     } catch (error) {\n  //         console.error(\"Login failed:\", error.response?.data || error.message);\n  //         throw error;\n  //     }\n  // };\n\n  const login = async (email, password, rememberMe) => {\n    try {\n      console.log(\"ðŸ”¹ Attempting Login for:\", email);\n      console.log(\"ðŸ”¹ Using Keycloak URL:\", `${process.env.REACT_APP_KEYCLOAK_URL}/realms/${process.env.REACT_APP_KEYCLOAK_REALM}/protocol/openid-connect/token`);\n      console.log(\"ðŸ”¹ Client ID:\", process.env.REACT_APP_KEYCLOAK_CLIENT_ID);\n      const response = await axios.post(`${process.env.REACT_APP_KEYCLOAK_URL}/realms/${process.env.REACT_APP_KEYCLOAK_REALM}/protocol/openid-connect/token`, new URLSearchParams({\n        grant_type: \"password\",\n        client_id: process.env.REACT_APP_KEYCLOAK_CLIENT_ID,\n        client_secret: process.env.REACT_APP_KEYCLOAK_CLIENT_SECRET,\n        username: email,\n        password\n      }), {\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        }\n      });\n      console.log(\"ðŸ”¹ Keycloak Response:\", response.data);\n      const {\n        access_token,\n        refresh_token\n      } = response.data;\n      if (rememberMe) {\n        localStorage.setItem(\"token\", access_token);\n        localStorage.setItem(\"refreshToken\", refresh_token);\n      } else {\n        sessionStorage.setItem(\"token\", access_token);\n        sessionStorage.setItem(\"refreshToken\", refresh_token);\n      }\n      return response.data;\n    } catch (error) {\n      var _error$response;\n      console.error(\"ðŸ”´ Login failed:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      console.error(\"ðŸ”¹ Full Error Response:\", error.response);\n      throw error;\n    }\n  };\n\n  // ðŸ”¹ **Signup (Calls Your Backend, Not Keycloak Directly)**\n  const signup = async (email, password) => {\n    try {\n      const response = await axios.post(\"http://localhost:5000/api/auth/signup\", {\n        email,\n        password\n      });\n      console.log(\"âœ… Signup successful:\", response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response2;\n      console.error(\"ðŸ”´ Signup failed:\", ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n      throw error;\n    }\n  };\n\n  // ðŸ”¹ **Forgot Password (Calls Your Backend)**\n  const forgotPassword = async email => {\n    try {\n      await axios.post(`${BACKEND_API_URL}/forgot-password`, {\n        email\n      });\n      return \"Password reset email sent!\";\n    } catch (error) {\n      console.error(\"Forgot password failed:\", error);\n      throw error;\n    }\n  };\n\n  // ðŸ”¹ **Logout from Keycloak**\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    sessionStorage.removeItem(\"token\");\n    keycloak.logout({\n      redirectUri: window.location.origin\n    });\n  };\n  return {\n    login,\n    signup,\n    forgotPassword,\n    logout,\n    keycloak\n  };\n};\n_s(useAuth, \"RhI8ij3JxyCvHhezn5pOW/NVOzw=\", false, function () {\n  return [useKeycloak];\n});","map":{"version":3,"names":["useKeycloak","axios","KEYCLOAK_TOKEN_URL","process","env","REACT_APP_KEYCLOAK_URL","REACT_APP_KEYCLOAK_REALM","BACKEND_API_URL","useAuth","_s","keycloak","login","email","password","rememberMe","console","log","REACT_APP_KEYCLOAK_CLIENT_ID","response","post","URLSearchParams","grant_type","client_id","client_secret","REACT_APP_KEYCLOAK_CLIENT_SECRET","username","headers","data","access_token","refresh_token","localStorage","setItem","sessionStorage","error","_error$response","message","signup","_error$response2","forgotPassword","logout","removeItem","redirectUri","window","location","origin"],"sources":["C:/Users/madko/Downloads/Keycloack_login/payco-auth/src/auth.js"],"sourcesContent":["import { useKeycloak } from \"@react-keycloak/web\";\r\nimport axios from \"axios\";\r\n\r\nconst KEYCLOAK_TOKEN_URL = `${process.env.REACT_APP_KEYCLOAK_URL}/realms/${process.env.REACT_APP_KEYCLOAK_REALM}/protocol/openid-connect/token`;\r\nconst BACKEND_API_URL = \"http://localhost:5000/api/auth\"; // Adjust for production\r\n\r\nexport const useAuth = () => {\r\n  const { keycloak } = useKeycloak();\r\n\r\n//   // ðŸ”¹ **Login with Keycloak Directly**\r\n//   const login = async (email, password, rememberMe) => {\r\n//     try {\r\n//         const response = await axios.post(\r\n//             `${process.env.REACT_APP_KEYCLOAK_URL}/realms/${process.env.REACT_APP_KEYCLOAK_REALM}/protocol/openid-connect/token`,\r\n//             new URLSearchParams({\r\n//                 grant_type: \"password\",\r\n//                 client_id: process.env.REACT_APP_KEYCLOAK_CLIENT_ID,\r\n//                 client_secret: process.env.REACT_APP_KEYCLOAK_CLIENT_SECRET,\r\n//                 username: email,\r\n//                 password,\r\n//             }),\r\n//             { headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" } }\r\n//         );\r\n\r\n//         const { access_token, refresh_token } = response.data;\r\n\r\n//         // âœ… Store tokens securely\r\n//         if (rememberMe) {\r\n//             localStorage.setItem(\"token\", access_token);\r\n//             localStorage.setItem(\"refreshToken\", refresh_token);\r\n//         } else {\r\n//             sessionStorage.setItem(\"token\", access_token);\r\n//             sessionStorage.setItem(\"refreshToken\", refresh_token);\r\n//         }\r\n\r\n//         return response.data;\r\n//     } catch (error) {\r\n//         console.error(\"Login failed:\", error.response?.data || error.message);\r\n//         throw error;\r\n//     }\r\n// };\r\n\r\nconst login = async (email, password, rememberMe) => {\r\n  try {\r\n      console.log(\"ðŸ”¹ Attempting Login for:\", email);\r\n      console.log(\"ðŸ”¹ Using Keycloak URL:\", `${process.env.REACT_APP_KEYCLOAK_URL}/realms/${process.env.REACT_APP_KEYCLOAK_REALM}/protocol/openid-connect/token`);\r\n      console.log(\"ðŸ”¹ Client ID:\", process.env.REACT_APP_KEYCLOAK_CLIENT_ID);\r\n\r\n      const response = await axios.post(\r\n          `${process.env.REACT_APP_KEYCLOAK_URL}/realms/${process.env.REACT_APP_KEYCLOAK_REALM}/protocol/openid-connect/token`,\r\n          new URLSearchParams({\r\n              grant_type: \"password\",\r\n              client_id: process.env.REACT_APP_KEYCLOAK_CLIENT_ID,\r\n              client_secret: process.env.REACT_APP_KEYCLOAK_CLIENT_SECRET,\r\n              username: email,\r\n              password,\r\n          }),\r\n          { headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" } }\r\n      );\r\n\r\n      console.log(\"ðŸ”¹ Keycloak Response:\", response.data);\r\n\r\n      const { access_token, refresh_token } = response.data;\r\n\r\n      if (rememberMe) {\r\n          localStorage.setItem(\"token\", access_token);\r\n          localStorage.setItem(\"refreshToken\", refresh_token);\r\n      } else {\r\n          sessionStorage.setItem(\"token\", access_token);\r\n          sessionStorage.setItem(\"refreshToken\", refresh_token);\r\n      }\r\n\r\n      return response.data;\r\n  } catch (error) {\r\n      console.error(\"ðŸ”´ Login failed:\", error.response?.data || error.message);\r\n      console.error(\"ðŸ”¹ Full Error Response:\", error.response);\r\n      throw error;\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n  // ðŸ”¹ **Signup (Calls Your Backend, Not Keycloak Directly)**\r\n  const signup = async (email, password) => {\r\n    try {\r\n        const response = await axios.post(\"http://localhost:5000/api/auth/signup\", {\r\n            email,\r\n            password,\r\n        });\r\n\r\n        console.log(\"âœ… Signup successful:\", response.data);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error(\"ðŸ”´ Signup failed:\", error.response?.data || error.message);\r\n        throw error;\r\n    }\r\n};\r\n\r\n\r\n  // ðŸ”¹ **Forgot Password (Calls Your Backend)**\r\n  const forgotPassword = async (email) => {\r\n    try {\r\n      await axios.post(`${BACKEND_API_URL}/forgot-password`, { email });\r\n      return \"Password reset email sent!\";\r\n    } catch (error) {\r\n      console.error(\"Forgot password failed:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // ðŸ”¹ **Logout from Keycloak**\r\n  const logout = () => {\r\n    localStorage.removeItem(\"token\");\r\n    sessionStorage.removeItem(\"token\");\r\n    keycloak.logout({ redirectUri: window.location.origin });\r\n  };\r\n\r\n  return { login, signup, forgotPassword, logout, keycloak };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}